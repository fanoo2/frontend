/* tslint:disable */
/* eslint-disable */
/**
 * Fanno Platform API
 * AI-driven platform automation API for agent orchestration
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api@fanno.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CreateSessionRequest,
  CreateSessionResponse,
  StripeWebhookEvent,
} from '../models/index';
import {
    CreateSessionRequestFromJSON,
    CreateSessionRequestToJSON,
    CreateSessionResponseFromJSON,
    CreateSessionResponseToJSON,
    StripeWebhookEventFromJSON,
    StripeWebhookEventToJSON,
} from '../models/index';

export interface CreateCheckoutSessionRequest {
    createSessionRequest: CreateSessionRequest;
}

export interface HandleStripeWebhookRequest {
    stripeWebhookEvent: StripeWebhookEvent;
}

/**
 * 
 */
export class PaymentsApi extends runtime.BaseAPI {

    /**
     * Create a Stripe Checkout Session
     */
    async createCheckoutSessionRaw(requestParameters: CreateCheckoutSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CreateSessionResponse>> {
        if (requestParameters['createSessionRequest'] == null) {
            throw new runtime.RequiredError(
                'createSessionRequest',
                'Required parameter "createSessionRequest" was null or undefined when calling createCheckoutSession().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // ApiKeyAuth authentication
        }


        let urlPath = `/payments/create-session`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CreateSessionRequestToJSON(requestParameters['createSessionRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CreateSessionResponseFromJSON(jsonValue));
    }

    /**
     * Create a Stripe Checkout Session
     */
    async createCheckoutSession(requestParameters: CreateCheckoutSessionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CreateSessionResponse> {
        const response = await this.createCheckoutSessionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stripe Webhook receiver
     */
    async handleStripeWebhookRaw(requestParameters: HandleStripeWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['stripeWebhookEvent'] == null) {
            throw new runtime.RequiredError(
                'stripeWebhookEvent',
                'Required parameter "stripeWebhookEvent" was null or undefined when calling handleStripeWebhook().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-Key"] = await this.configuration.apiKey("X-API-Key"); // ApiKeyAuth authentication
        }


        let urlPath = `/payments/webhook`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: StripeWebhookEventToJSON(requestParameters['stripeWebhookEvent']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Stripe Webhook receiver
     */
    async handleStripeWebhook(requestParameters: HandleStripeWebhookRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.handleStripeWebhookRaw(requestParameters, initOverrides);
    }

}
