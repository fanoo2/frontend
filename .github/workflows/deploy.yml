name: Deploy to Staging

on:
  workflow_run:
    workflows: ["CI/CD"]
    branches: [main]
    types: [completed]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production
        run: npm run build

      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOF'
          FROM nginx:alpine
          
          # Copy built assets
          COPY dist/ /usr/share/nginx/html/
          
          # Copy nginx configuration
          COPY nginx.conf /etc/nginx/nginx.conf
          
          EXPOSE 80
          
          CMD ["nginx", "-g", "daemon off;"]
          EOF

      - name: Create nginx configuration
        run: |
          cat > nginx.conf << 'EOF'
          events {
              worker_connections 1024;
          }
          
          http {
              include       /etc/nginx/mime.types;
              default_type  application/octet-stream;
              
              server {
                  listen 80;
                  server_name localhost;
                  
                  root /usr/share/nginx/html;
                  index index.html;
                  
                  # Handle client-side routing
                  location / {
                      try_files $uri $uri/ /index.html;
                  }
                  
                  # Cache static assets
                  location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                      expires 1y;
                      add_header Cache-Control "public, immutable";
                  }
              }
          }
          EOF

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Deploy to staging (example with kubectl)
        run: |
          echo "Deployment example:"
          echo "Image built and pushed: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo ""
          echo "To deploy with kubectl:"
          echo "kubectl set image deployment/frontend-app frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
          echo ""
          echo "To deploy with Helm:"
          echo "helm upgrade frontend-staging ./helm-charts/frontend \\"
          echo "  --set image.repository=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} \\"
          echo "  --set image.tag=${{ github.sha }} \\"
          echo "  --namespace staging"
          echo ""
          echo "For Vercel deployment, add this step:"
          echo "- uses: amondnet/vercel-action@v25"
          echo "  with:"
          echo "    vercel-token: \${{ secrets.VERCEL_TOKEN }}"
          echo "    vercel-org-id: \${{ secrets.ORG_ID }}"
          echo "    vercel-project-id: \${{ secrets.PROJECT_ID }}"

  deploy-vercel:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && vars.DEPLOY_TO_VERCEL == 'true' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production
        run: npm run build

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./